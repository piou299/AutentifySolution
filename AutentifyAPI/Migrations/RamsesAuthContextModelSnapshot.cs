// <auto-generated />
using System;
using AutentifyAPI.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace AutentifyAPI.Migrations
{
    [DbContext(typeof(RamsesAuthContext))]
    partial class RamsesAuthContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.3")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("AutentifyAPI.Models.Agence", b =>
                {
                    b.Property<int>("AgenceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Adresse")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateCreation")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateEnregistrement")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Libelle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SocieteId")
                        .HasColumnType("int");

                    b.Property<int>("VilleId")
                        .HasColumnType("int");

                    b.HasKey("AgenceId");

                    b.HasIndex("SocieteId");

                    b.HasIndex("VilleId");

                    b.ToTable("Agences");
                });

            modelBuilder.Entity("AutentifyAPI.Models.Connexion", b =>
                {
                    b.Property<int>("ConnexionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("DateHeure")
                        .HasColumnType("datetime2");

                    b.Property<int>("UtilisateurId")
                        .HasColumnType("int");

                    b.HasKey("ConnexionId");

                    b.HasIndex("UtilisateurId");

                    b.ToTable("Connexions");
                });

            modelBuilder.Entity("AutentifyAPI.Models.Departement", b =>
                {
                    b.Property<int>("DepartementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("DateEnregistremnt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RegionId")
                        .HasColumnType("int");

                    b.HasKey("DepartementId");

                    b.HasIndex("RegionId");

                    b.ToTable("Departements");
                });

            modelBuilder.Entity("AutentifyAPI.Models.Exercice", b =>
                {
                    b.Property<int>("ExerciceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AgenceId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateDebut")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateEnregistrement")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateFin")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Etat")
                        .HasColumnType("int");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Observation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("TauxTVA")
                        .HasColumnType("float");

                    b.HasKey("ExerciceId");

                    b.HasIndex("AgenceId");

                    b.ToTable("Exercices");
                });

            modelBuilder.Entity("AutentifyAPI.Models.JourFeries", b =>
                {
                    b.Property<int>("JourFeriesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Commentaire")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateEnregistrement")
                        .HasColumnType("datetime2");

                    b.Property<string>("Frequence")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Jour")
                        .HasColumnType("int");

                    b.Property<string>("JourFerie")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Mois")
                        .HasColumnType("int");

                    b.HasKey("JourFeriesId");

                    b.ToTable("JourFeries");
                });

            modelBuilder.Entity("AutentifyAPI.Models.Langue", b =>
                {
                    b.Property<int>("LangueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("DateEnregistrement")
                        .HasColumnType("datetime2");

                    b.Property<string>("Icone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Libelle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LangueId");

                    b.ToTable("Langues");
                });

            modelBuilder.Entity("AutentifyAPI.Models.Monnaie", b =>
                {
                    b.Property<int>("MonnaieId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("DateEnregistrement")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Parite")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Reference")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Suffixe")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MonnaieId");

                    b.ToTable("Monnaies");
                });

            modelBuilder.Entity("AutentifyAPI.Models.Partenaire", b =>
                {
                    b.Property<int>("PartenaireId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Adresse")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateEnregistrement")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PaysId")
                        .HasColumnType("int");

                    b.Property<string>("Telephone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TypePartenaireId")
                        .HasColumnType("int");

                    b.HasKey("PartenaireId");

                    b.HasIndex("PaysId");

                    b.HasIndex("TypePartenaireId");

                    b.ToTable("Partenaires");
                });

            modelBuilder.Entity("AutentifyAPI.Models.Password", b =>
                {
                    b.Property<int>("PasswordId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Etat")
                        .HasColumnType("int");

                    b.Property<string>("Pass")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UtilisateurId")
                        .HasColumnType("int");

                    b.HasKey("PasswordId");

                    b.HasIndex("UtilisateurId");

                    b.ToTable("Passwords");
                });

            modelBuilder.Entity("AutentifyAPI.Models.Pays", b =>
                {
                    b.Property<int>("PaysId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Indicatif")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Logo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NomPays")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PaysId");

                    b.ToTable("Pays");
                });

            modelBuilder.Entity("AutentifyAPI.Models.Periode", b =>
                {
                    b.Property<int>("PeriodeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("DateDebut")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateFin")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Etat")
                        .HasColumnType("int");

                    b.Property<int>("ExerciceId")
                        .HasColumnType("int");

                    b.Property<int>("NumeroMois")
                        .HasColumnType("int");

                    b.HasKey("PeriodeId");

                    b.HasIndex("ExerciceId");

                    b.ToTable("Periodes");
                });

            modelBuilder.Entity("AutentifyAPI.Models.Personne", b =>
                {
                    b.Property<int>("PersonneId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("DateEnregistrement")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateNaissance")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LieuNaissance")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Photo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Prenom")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("Sexe")
                        .HasColumnType("int");

                    b.Property<string>("Telephone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PersonneId");

                    b.ToTable("Personnes");
                });

            modelBuilder.Entity("AutentifyAPI.Models.Region", b =>
                {
                    b.Property<int>("RegionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("DateEnregistrement")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PaysId")
                        .HasColumnType("int");

                    b.HasKey("RegionId");

                    b.HasIndex("PaysId");

                    b.ToTable("Regions");
                });

            modelBuilder.Entity("AutentifyAPI.Models.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Libelle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("AutentifyAPI.Models.Societe", b =>
                {
                    b.Property<int>("SocieteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Adresse")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateCreation")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateEnregistrement")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Logo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sigle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telephone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SocieteId");

                    b.ToTable("Societes");
                });

            modelBuilder.Entity("AutentifyAPI.Models.SocieteJourFeries", b =>
                {
                    b.Property<int>("SocieteJourFeriesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("DateEnregistrement")
                        .HasColumnType("datetime2");

                    b.Property<int>("JourFeriesId")
                        .HasColumnType("int");

                    b.Property<int?>("MonnaieId")
                        .HasColumnType("int");

                    b.Property<int>("SocieteId")
                        .HasColumnType("int");

                    b.HasKey("SocieteJourFeriesId");

                    b.HasIndex("JourFeriesId");

                    b.HasIndex("MonnaieId");

                    b.HasIndex("SocieteId");

                    b.ToTable("SocieteJourFeries");
                });

            modelBuilder.Entity("AutentifyAPI.Models.SocieteMonnaie", b =>
                {
                    b.Property<int>("SocieteMonnaieId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("DateEnregistrement")
                        .HasColumnType("datetime2");

                    b.Property<int>("MonnaieId")
                        .HasColumnType("int");

                    b.Property<int>("SocieteId")
                        .HasColumnType("int");

                    b.HasKey("SocieteMonnaieId");

                    b.HasIndex("MonnaieId");

                    b.HasIndex("SocieteId");

                    b.ToTable("SocieteMonnaies");
                });

            modelBuilder.Entity("AutentifyAPI.Models.SocietePartenaire", b =>
                {
                    b.Property<int>("SocietePartenaireId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("DateEnregistrement")
                        .HasColumnType("datetime2");

                    b.Property<int>("PartenaireId")
                        .HasColumnType("int");

                    b.Property<int>("SocieteId")
                        .HasColumnType("int");

                    b.HasKey("SocietePartenaireId");

                    b.HasIndex("PartenaireId");

                    b.HasIndex("SocieteId");

                    b.ToTable("SocietePartenaires");
                });

            modelBuilder.Entity("AutentifyAPI.Models.TypePartenaire", b =>
                {
                    b.Property<int>("TypePartenaireId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Libelle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TypePartenaireId");

                    b.ToTable("TypePartenaires");
                });

            modelBuilder.Entity("AutentifyAPI.Models.UserRole", b =>
                {
                    b.Property<int>("UserRoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("DateEnregistrement")
                        .HasColumnType("datetime2");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("UtilisateurId")
                        .HasColumnType("int");

                    b.HasKey("UserRoleId");

                    b.HasIndex("RoleId");

                    b.HasIndex("UtilisateurId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("AutentifyAPI.Models.Utilisateur", b =>
                {
                    b.Property<int>("UtilisateurId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AgenceId")
                        .HasColumnType("int");

                    b.Property<int?>("Etat")
                        .HasColumnType("int");

                    b.Property<int>("LangueId")
                        .HasColumnType("int");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PersonneId")
                        .HasColumnType("int");

                    b.HasKey("UtilisateurId");

                    b.HasIndex("AgenceId");

                    b.HasIndex("LangueId");

                    b.HasIndex("PersonneId")
                        .IsUnique();

                    b.ToTable("Utilisateurs");
                });

            modelBuilder.Entity("AutentifyAPI.Models.Ville", b =>
                {
                    b.Property<int>("VilleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RegionId")
                        .HasColumnType("int");

                    b.HasKey("VilleId");

                    b.HasIndex("RegionId");

                    b.ToTable("Villes");
                });

            modelBuilder.Entity("AutentifyAPI.Models.Agence", b =>
                {
                    b.HasOne("AutentifyAPI.Models.Societe", "Societe")
                        .WithMany("Agences")
                        .HasForeignKey("SocieteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AutentifyAPI.Models.Ville", "Ville")
                        .WithMany("Agences")
                        .HasForeignKey("VilleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Societe");

                    b.Navigation("Ville");
                });

            modelBuilder.Entity("AutentifyAPI.Models.Connexion", b =>
                {
                    b.HasOne("AutentifyAPI.Models.Utilisateur", "Utilisateur")
                        .WithMany("Connexions")
                        .HasForeignKey("UtilisateurId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Utilisateur");
                });

            modelBuilder.Entity("AutentifyAPI.Models.Departement", b =>
                {
                    b.HasOne("AutentifyAPI.Models.Region", "Region")
                        .WithMany("Departements")
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Region");
                });

            modelBuilder.Entity("AutentifyAPI.Models.Exercice", b =>
                {
                    b.HasOne("AutentifyAPI.Models.Agence", "Agence")
                        .WithMany("Exercices")
                        .HasForeignKey("AgenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Agence");
                });

            modelBuilder.Entity("AutentifyAPI.Models.Partenaire", b =>
                {
                    b.HasOne("AutentifyAPI.Models.Pays", "Pays")
                        .WithMany()
                        .HasForeignKey("PaysId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AutentifyAPI.Models.TypePartenaire", "TypePartenaire")
                        .WithMany("Partenaires")
                        .HasForeignKey("TypePartenaireId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pays");

                    b.Navigation("TypePartenaire");
                });

            modelBuilder.Entity("AutentifyAPI.Models.Password", b =>
                {
                    b.HasOne("AutentifyAPI.Models.Utilisateur", "Utilisateur")
                        .WithMany("Passwords")
                        .HasForeignKey("UtilisateurId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Utilisateur");
                });

            modelBuilder.Entity("AutentifyAPI.Models.Periode", b =>
                {
                    b.HasOne("AutentifyAPI.Models.Exercice", "Exercice")
                        .WithMany("Periodes")
                        .HasForeignKey("ExerciceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exercice");
                });

            modelBuilder.Entity("AutentifyAPI.Models.Region", b =>
                {
                    b.HasOne("AutentifyAPI.Models.Pays", "Pays")
                        .WithMany()
                        .HasForeignKey("PaysId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pays");
                });

            modelBuilder.Entity("AutentifyAPI.Models.SocieteJourFeries", b =>
                {
                    b.HasOne("AutentifyAPI.Models.JourFeries", "JourFeries")
                        .WithMany("SocieteJourFeries")
                        .HasForeignKey("JourFeriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AutentifyAPI.Models.Monnaie", null)
                        .WithMany("SocieteJourFeries")
                        .HasForeignKey("MonnaieId");

                    b.HasOne("AutentifyAPI.Models.Societe", "Societe")
                        .WithMany("SocieteJourFeries")
                        .HasForeignKey("SocieteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("JourFeries");

                    b.Navigation("Societe");
                });

            modelBuilder.Entity("AutentifyAPI.Models.SocieteMonnaie", b =>
                {
                    b.HasOne("AutentifyAPI.Models.Monnaie", "Monnaie")
                        .WithMany("SocieteMonnaies")
                        .HasForeignKey("MonnaieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AutentifyAPI.Models.Societe", "Societe")
                        .WithMany("SocieteMonnaies")
                        .HasForeignKey("SocieteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Monnaie");

                    b.Navigation("Societe");
                });

            modelBuilder.Entity("AutentifyAPI.Models.SocietePartenaire", b =>
                {
                    b.HasOne("AutentifyAPI.Models.Partenaire", "Partenaire")
                        .WithMany("SocietePartenaires")
                        .HasForeignKey("PartenaireId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AutentifyAPI.Models.Societe", "Societe")
                        .WithMany("SocietePartenaires")
                        .HasForeignKey("SocieteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Partenaire");

                    b.Navigation("Societe");
                });

            modelBuilder.Entity("AutentifyAPI.Models.UserRole", b =>
                {
                    b.HasOne("AutentifyAPI.Models.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AutentifyAPI.Models.Utilisateur", "Utilisateur")
                        .WithMany("UserRoles")
                        .HasForeignKey("UtilisateurId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("Utilisateur");
                });

            modelBuilder.Entity("AutentifyAPI.Models.Utilisateur", b =>
                {
                    b.HasOne("AutentifyAPI.Models.Agence", "Agence")
                        .WithMany("Utilisateurs")
                        .HasForeignKey("AgenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AutentifyAPI.Models.Langue", "Langue")
                        .WithMany("Utilisateurs")
                        .HasForeignKey("LangueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AutentifyAPI.Models.Personne", "Personne")
                        .WithOne("Utilisateur")
                        .HasForeignKey("AutentifyAPI.Models.Utilisateur", "PersonneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Agence");

                    b.Navigation("Langue");

                    b.Navigation("Personne");
                });

            modelBuilder.Entity("AutentifyAPI.Models.Ville", b =>
                {
                    b.HasOne("AutentifyAPI.Models.Region", "Regions")
                        .WithMany("Villes")
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Regions");
                });

            modelBuilder.Entity("AutentifyAPI.Models.Agence", b =>
                {
                    b.Navigation("Exercices");

                    b.Navigation("Utilisateurs");
                });

            modelBuilder.Entity("AutentifyAPI.Models.Exercice", b =>
                {
                    b.Navigation("Periodes");
                });

            modelBuilder.Entity("AutentifyAPI.Models.JourFeries", b =>
                {
                    b.Navigation("SocieteJourFeries");
                });

            modelBuilder.Entity("AutentifyAPI.Models.Langue", b =>
                {
                    b.Navigation("Utilisateurs");
                });

            modelBuilder.Entity("AutentifyAPI.Models.Monnaie", b =>
                {
                    b.Navigation("SocieteJourFeries");

                    b.Navigation("SocieteMonnaies");
                });

            modelBuilder.Entity("AutentifyAPI.Models.Partenaire", b =>
                {
                    b.Navigation("SocietePartenaires");
                });

            modelBuilder.Entity("AutentifyAPI.Models.Personne", b =>
                {
                    b.Navigation("Utilisateur");
                });

            modelBuilder.Entity("AutentifyAPI.Models.Region", b =>
                {
                    b.Navigation("Departements");

                    b.Navigation("Villes");
                });

            modelBuilder.Entity("AutentifyAPI.Models.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("AutentifyAPI.Models.Societe", b =>
                {
                    b.Navigation("Agences");

                    b.Navigation("SocieteJourFeries");

                    b.Navigation("SocieteMonnaies");

                    b.Navigation("SocietePartenaires");
                });

            modelBuilder.Entity("AutentifyAPI.Models.TypePartenaire", b =>
                {
                    b.Navigation("Partenaires");
                });

            modelBuilder.Entity("AutentifyAPI.Models.Utilisateur", b =>
                {
                    b.Navigation("Connexions");

                    b.Navigation("Passwords");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("AutentifyAPI.Models.Ville", b =>
                {
                    b.Navigation("Agences");
                });
#pragma warning restore 612, 618
        }
    }
}
